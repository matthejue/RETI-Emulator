digraph G {
  ranksep=2; // Increase vertical spacing between ranks
  nodesep=2; // Increase horizontal spacing between nodes
  "Start" [shape=point]; // Mark the initial node as a point
  "Start" -> "NB";

  "NB" -> "SI" [label="SOFTWARE_INTERRUPT | | isr_active=true; stop_exec_every_step(); si_happened=true; setup_interrupt(in->arg8);"]
  "NB" -> "SI" [label="STEP_INTO_ACTION | check_if_int_i() | isr_active=true; si_happened=true; setup_interrupt(in->arg8);"]
  "NB" -> "HI" [label="HARDWARE_INTERRUPT | stack_top==-1 | check_deactivation_interrupt_timer(in->arg8); setup_interrupt_for_hi(in->arg8, &out->retbool1);"]
  "HI" -> "NB" [label="RETURN_FROM_INTERRUPT | !si_happened && stack_top==0 && heap_size==0 | isr_active=false; stack_top--; return_from_interrupt(); again_exec_steps_if_finished_here(); again_exec_steps_if_stopped_here();"]
  "SI" -> "NB" [label="RETURN_FROM_INTERRUPT | | isr_active=false; si_happened=false; return_from_interrupt(); again_exec_steps_if_finished_here(); again_exec_steps_if_stopped_here();"]
  "SI" -> "HI" [label="HARDWARE_INTERRUPT | stack_top==-1 | check_deactivation_interrupt_timer(in->arg8); setup_interrupt_for_hi(in->arg8, &out->retbool1);"]
  "HI" -> "HI" [label="HARDWARE_INTERRUPT | (out->retbool1=check_prio_isr(in->arg8)) | check_deactivation_interrupt_timer(in->arg8); stack_top++; isr_priority_stack[stack_top]=isr_to_prio[arg]; display_notification_box_with_action(); setup_interrupt(arg);"]
  "HI" -> "HI" [label="RETURN_FROM_INTERRUPT | heap_size>1 && !check_prio_heap() | stack_top--; return_from_interrupt(); again_exec_steps_if_finished_here(); again_exec_steps_if_stopped_here();"]
  "HI" -> "SI" [label="RETURN_FROM_INTERRUPT | si_happened && stack_top==0 && heap_size==0 | stack_top--; return_from_interrupt(); again_exec_steps_if_finished_here(); again_exec_steps_if_stopped_here();"]
  "HI" -> "HI" [label="HARDWARE_INTERRUPT | !(out->retbool1=check_prio_isr(in->arg8)) && heap_size < HEAP_SIZE | check_deactivation_interrupt_timer(in->arg8);; insert_into_heap();"]
  "HI" -> "HI" [label="RETURN_FROM_INTERRUPT | heap_size>1 && check_prio_heap() | return_from_interrupt(); heap_size--; again_exec_steps_if_stopped_here(); handle_next_hi();"]
  "HI" -> "HI" [label="FINALIZE | isr_finished && isr_active | finished_here=stack_top; isr_finished=false;"]
  "HI" -> "SI" [label="RETURN_FROM_INTERRUPT | si_happened && stack_top==-1 && heap_size==1 | heap_size--; return_from_interrupt(); again_exec_steps_if_finished_here(); again_exec_steps_if_stopped_here();"]
  "HI" -> "NB" [label="RETURN_FROM_INTERRUPT | !si_happened && stack_top==-1 && heap_size==1 | isr_active=false; heap_size--; return_from_interrupt(); again_exec_steps_if_finished_here(); again_exec_steps_if_stopped_here();"]
"HI" -> "HI" [label="SOFTWARE_INTERRUPT | | no_si_inside_hi_error();"]
}

// "HI" -> "HI" [label="SOFTWARE_INTERRUPT | stack_top>-1 | si_happened_here(); setup_interrupt();"]
// "HI" -> "HI" [label="RETURN_FROM_INTERRUPT | check_if_si_happened_here() | return_from_interrupt()"]
